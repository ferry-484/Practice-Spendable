import React, { Component } from "react";
import ReactTableComponent from "../../../ReactTable/ReactTable";
import {
  adminSupporterList,
  guardianSupporterList
} from "./ParticipantTabSetupConfig";
import { fetchMethod } from "../../../FetchMethod";
import swal from "sweetalert";
import moment from "moment";
import {
  connectedSupporterQuery,
  allSupporterConnectedwithParticipant,
  UserdataCardwithdrawCall,
  UserdataCheckBalance,
  UserdataCardBlock,
  getCardDetailsQuery
} from "./ParticipantTabQuery";
import { DotLoader } from "react-spinners";
import "./participantTabSetup.css";
import { Button } from "@material-ui/core";
class ConnectedSupporter extends Component {
  constructor(props) {
    super(props);
    this.state = {
      listData: undefined,
      search: "",
      pageNo: parseInt(localStorage.getItem("rows")),
      rows: parseInt(localStorage.getItem("rows")),
      count: 0,
      filter: {
        participantId: this.props.id,
        order: "id desc"
      },
      totalData: undefined
    };
  }

  formatDate = date => {
    var date = new Date(date);
    var dd = date.getDate();
    var mm = date.getMonth() + 1;
    var yyyy = date.getFullYear();
    if (dd < 10) {
      dd = "0" + dd;
    }
    if (mm < 10) {
      mm = "0" + mm;
    }

    return (date = dd + "/" + mm + "/" + yyyy);
  };

  componentWillMount() {
    this.connectedSupporter();
  }
  getCardDetails(item, id) {
    // console.log("iddddddddddddddddddddddddddddddddd", id);
    console.log("item", item);
    item.map(result => {
      // item.firstname =
      //   item.fkParticipantConnectedSupporterIdrel &&
      //   item.fkParticipantConnectedSupporterIdrel.Userdata.length > 0
      //     ? item.fkParticipantConnectedSupporterIdrel.Userdata[0].firstname
      //     : "";
      // // ,
      // item.lastname =
      //   item.fkParticipantConnectedSupporterIdrel &&
      //   item.fkParticipantConnectedSupporterIdrel.Userdata.length > 0
      //     ? item.fkParticipantConnectedSupporterIdrel.Userdata[0].lastname
      //     : "";
      // // ,
      // item.email =
      //   item.fkParticipantConnectedSupporterIdrel &&
      //   item.fkParticipantConnectedSupporterIdrel.Userdata.length > 0
      //     ? item.fkParticipantConnectedSupporterIdrel.Userdata[0].email
      //     : "";
      // item.flagged = item.isSupporterFlagged === 0 ? "NO" : "YES";
      // //SUPPORTER ACTIVATED OR DEACTIVATED
      // item.status =
      //   item.fkParticipantConnectedSupporterIdrel &&
      //   item.fkParticipantConnectedSupporterIdrel.Userdata.length > 0
      //     ? item.fkParticipantConnectedSupporterIdrel.Userdata[0].active === 0
      //       ? "DEACTIVATED"
      //       : "ACTIVATED"
      //     : "";
      // item.address =
      //   item.fkParticipantConnectedSupporterIdrel &&
      //   item.fkParticipantConnectedSupporterIdrel.Userdata.length > 0
      //     ? item.fkParticipantConnectedSupporterIdrel.Userdata[0].address !==
      //         null &&
      //       item.fkParticipantConnectedSupporterIdrel.Userdata[0].address !==
      //         ""
      //       ? item.fkParticipantConnectedSupporterIdrel.Userdata[0].address.concat(
      //           item.fkParticipantConnectedSupporterIdrel.Userdata[0].city &&
      //             item.fkParticipantConnectedSupporterIdrel.Userdata[0]
      //               .city !== null
      //             ? " " +
      //                 item.fkParticipantConnectedSupporterIdrel.Userdata[0]
      //                   .city
      //             : ""
      //         )
      //       : ""
      //     : "";
      // item.phonenumber =
      //   item.fkParticipantConnectedSupporterIdrel &&
      //   item.fkParticipantConnectedSupporterIdrel.Userdata.length > 0
      //     ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
      //         .phonenumber !== null
      //       ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
      //           .phonenumber
      //       : ""
      //     : "";
      // // ,
      // item.dob =
      //   item.fkParticipantConnectedSupporterIdrel &&
      //   item.fkParticipantConnectedSupporterIdrel.Userdata.length > 0
      //     ? item.fkParticipantConnectedSupporterIdrel.Userdata[0].dob !== null
      //       ? this.formatDate(
      //           item.fkParticipantConnectedSupporterIdrel.Userdata[0].dob
      //         )
      //       : ""
      //     : "";
      // (item.cardStatus = "cjekc")
      fetchMethod(getCardDetailsQuery, {
        where: { userId: result.supporterId }
      })
        .then(resp => resp.json())
        .then(resp => {
          // var resultArr = [];
          if (
            resp &&
            resp.data &&
            resp.data.allCardDetails &&
            resp.data.allCardDetails.CardDetails &&
            resp.data.allCardDetails.CardDetails.length > 0
          ) {
            console.log(
              "res card card card",
              resp.data.allCardDetails.CardDetails
            );

            item[0].cardStatus =
              resp.data.allCardDetails.CardDetails[0].cardstatus === "0" ||
              resp.data.allCardDetails.CardDetails[0].cardstatus === null
                ? "UNBLOCK"
                : "BLOCK";

            console.log("REslkjksfjslfljksfkljasklj", item);
            return;
            // console.log("data data", data);

            // this.setState({
            //   cardDetails: resp.data.allCardDetails.CardDetails
            // });
          } else {
            item[0].cardStatus = "";
            console.log("res e;se ", resp);
            return;
            // console.log("res e;se  data", data);
          }
        })
        .catch(error => {
          swal({ title: error.message, icon: "warning" });
        });
      console.log("id test..........................", item);
    });

    this.setState(
      {
        count: item.totalCount,
        // res.data &&
        // res.data.allParticipantConnectedSupporters &&
        // res.data.allParticipantConnectedSupporters !== null
        //   ? res.data.allParticipantConnectedSupporters.totalCount
        //   : "",
        listData: item
        // res.data &&
        // res.data.allParticipantConnectedSupporters !== undefined &&
        // res.data.allParticipantConnectedSupporters !== null
        //   ? res.data.allParticipantConnectedSupporters
        //       .ParticipantConnectedSupporters
        //   : ""
      },
      () => {
        console.log("klfksfsfjksafkjafjk", this.state.listData);
        this.props.disablerefetchConnect();
        this.props.listModalData(this.state.totalData);
      }
    );

    //map lagake value need to fetch
  }
  connectedSupporter = () => {
    if (localStorage.getItem("role") === "ADMIN") {
      fetchMethod(connectedSupporterQuery, {
        where: this.state.filter,
        last: this.state.rows,
        first: this.state.pageNo
      })
        .then(res => res.json())
        .then(res => {
          if (res && res.error && res.error.statusCode === 401) {
            swal({ title: res.error.message, icon: "warning" }).then(() => {
              localStorage.clear();
              window.location = "/";
            });
          } else {
            this.setState({
              totalData: res.data.id1.ParticipantConnectedSupporters
            });
            res.data.allParticipantConnectedSupporters.ParticipantConnectedSupporters.map(
              item => {
                fetchMethod(getCardDetailsQuery, {
                  where: { userId: item.supporterId }
                })
                  .then(resp => resp.json())
                  .then(resp => {
                    // var resultArr = [];

                    // return (
                    item.firstname =
                      item.fkParticipantConnectedSupporterIdrel &&
                      item.fkParticipantConnectedSupporterIdrel.Userdata
                        .length > 0
                        ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                            .firstname
                        : "";
                    item.lastname =
                      item.fkParticipantConnectedSupporterIdrel &&
                      item.fkParticipantConnectedSupporterIdrel.Userdata
                        .length > 0
                        ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                            .lastname
                        : "";
                    item.email =
                      item.fkParticipantConnectedSupporterIdrel &&
                      item.fkParticipantConnectedSupporterIdrel.Userdata
                        .length > 0
                        ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                            .email
                        : "";
                    item.flagged = item.isSupporterFlagged === 0 ? "NO" : "YES";
                    //SUPPORTER ACTIVATED OR DEACTIVATED
                    item.status =
                      item.fkParticipantConnectedSupporterIdrel &&
                      item.fkParticipantConnectedSupporterIdrel.Userdata
                        .length > 0
                        ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                            .active === 0
                          ? "DEACTIVATED"
                          : "ACTIVATED"
                        : "";
                    item.address =
                      item.fkParticipantConnectedSupporterIdrel &&
                      item.fkParticipantConnectedSupporterIdrel.Userdata
                        .length > 0
                        ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                            .address !== null &&
                          item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                            .address !== ""
                          ? item.fkParticipantConnectedSupporterIdrel.Userdata[0].address.concat(
                              item.fkParticipantConnectedSupporterIdrel
                                .Userdata[0].city &&
                                item.fkParticipantConnectedSupporterIdrel
                                  .Userdata[0].city !== null
                                ? " " +
                                    item.fkParticipantConnectedSupporterIdrel
                                      .Userdata[0].city
                                : ""
                            )
                          : ""
                        : "";
                    item.phonenumber =
                      item.fkParticipantConnectedSupporterIdrel &&
                      item.fkParticipantConnectedSupporterIdrel.Userdata
                        .length > 0
                        ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                            .phonenumber !== null
                          ? item.fkParticipantConnectedSupporterIdrel
                              .Userdata[0].phonenumber
                          : ""
                        : "";
                    item.dob =
                      item.fkParticipantConnectedSupporterIdrel &&
                      item.fkParticipantConnectedSupporterIdrel.Userdata
                        .length > 0
                        ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                            .dob !== null
                          ? this.formatDate(
                              item.fkParticipantConnectedSupporterIdrel
                                .Userdata[0].dob
                            )
                          : ""
                        : "";
                    // ,
                    // (item.cardStatus = "UNBLOCK")
                    // );

                    if (
                      resp &&
                      resp.data &&
                      resp.data.allCardDetails &&
                      resp.data.allCardDetails.CardDetails &&
                      resp.data.allCardDetails.CardDetails.length > 0
                    ) {
                      console.log(
                        "res card card card",
                        resp.data.allCardDetails.CardDetails
                      );

                      item.cardStatus =
                        resp.data.allCardDetails.CardDetails[0].cardstatus ===
                          "0" ||
                        resp.data.allCardDetails.CardDetails[0].cardstatus ===
                          null
                          ? "UNBLOCK"
                          : "BLOCK";

                      console.log("REslkjksfjslfljksfkljasklj", item);
                      return;
                      // console.log("data data", data);

                      // this.setState({
                      //   cardDetails: resp.data.allCardDetails.CardDetails
                      // });
                    } else {
                      item.cardStatus = "";
                      console.log("res e;se ", resp);
                      return;
                      // console.log("res e;se  data", data);
                    }
                  });

                // return (
                //   (item.firstname =
                //     item.fkParticipantConnectedSupporterIdrel &&
                //     item.fkParticipantConnectedSupporterIdrel.Userdata.length >
                //       0
                //       ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                //           .firstname
                //       : ""),
                //   (item.lastname =
                //     item.fkParticipantConnectedSupporterIdrel &&
                //     item.fkParticipantConnectedSupporterIdrel.Userdata.length >
                //       0
                //       ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                //           .lastname
                //       : ""),
                //   (item.email =
                //     item.fkParticipantConnectedSupporterIdrel &&
                //     item.fkParticipantConnectedSupporterIdrel.Userdata.length >
                //       0
                //       ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                //           .email
                //       : ""),
                //   (item.flagged = item.isSupporterFlagged === 0 ? "NO" : "YES"),
                //   //SUPPORTER ACTIVATED OR DEACTIVATED
                //   (item.status =
                //     item.fkParticipantConnectedSupporterIdrel &&
                //     item.fkParticipantConnectedSupporterIdrel.Userdata.length >
                //       0
                //       ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                //           .active === 0
                //         ? "DEACTIVATED"
                //         : "ACTIVATED"
                //       : ""),
                //   (item.address =
                //     item.fkParticipantConnectedSupporterIdrel &&
                //     item.fkParticipantConnectedSupporterIdrel.Userdata.length >
                //       0
                //       ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                //           .address !== null &&
                //         item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                //           .address !== ""
                //         ? item.fkParticipantConnectedSupporterIdrel.Userdata[0].address.concat(
                //             item.fkParticipantConnectedSupporterIdrel
                //               .Userdata[0].city &&
                //               item.fkParticipantConnectedSupporterIdrel
                //                 .Userdata[0].city !== null
                //               ? " " +
                //                   item.fkParticipantConnectedSupporterIdrel
                //                     .Userdata[0].city
                //               : ""
                //           )
                //         : ""
                //       : ""),
                //   (item.phonenumber =
                //     item.fkParticipantConnectedSupporterIdrel &&
                //     item.fkParticipantConnectedSupporterIdrel.Userdata.length >
                //       0
                //       ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                //           .phonenumber !== null
                //         ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                //             .phonenumber
                //         : ""
                //       : ""),
                //   (item.dob =
                //     item.fkParticipantConnectedSupporterIdrel &&
                //     item.fkParticipantConnectedSupporterIdrel.Userdata.length >
                //       0
                //       ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                //           .dob !== null
                //         ? this.formatDate(
                //             item.fkParticipantConnectedSupporterIdrel
                //               .Userdata[0].dob
                //           )
                //         : ""
                //       : ""),
                //   (item.cardStatus = "UNBLOCK")
                // );
              }
            );

            console.log(
              "{findal response.........................",
              res.data.allParticipantConnectedSupporters
                .ParticipantConnectedSupporters
            );
            // this.getCardDetails(
            //   res.data.allParticipantConnectedSupporters
            //     .ParticipantConnectedSupporters
            // );
            this.setState(
              {
                count:
                  res.data &&
                  res.data.allParticipantConnectedSupporters &&
                  res.data.allParticipantConnectedSupporters !== null
                    ? res.data.allParticipantConnectedSupporters.totalCount
                    : "",
                listData:
                  res.data &&
                  res.data.allParticipantConnectedSupporters !== undefined &&
                  res.data.allParticipantConnectedSupporters !== null
                    ? res.data.allParticipantConnectedSupporters
                        .ParticipantConnectedSupporters
                    : ""
              },
              () => {
                console.log("klfksfsfjksafkjafjk", this.state.listData);
                this.props.disablerefetchConnect();
                this.props.listModalData(this.state.totalData);
              }
            );
          }
        })
        .catch(e => {
          swal({ title: e.message, icon: "warning" });
          this.setState({ listData: [] });
        });
    }

    if (localStorage.getItem("role") === "GUARDIAN") {
      fetchMethod(allSupporterConnectedwithParticipant, {
        where: this.state.filter
        // last: this.state.rows,
        // first: this.state.pageNo
      })
        .then(res => res.json())
        .then(res => {
          if (
            res.data &&
            res.data.allParticipantConnectedSupporters &&
            res.data.allParticipantConnectedSupporters
              .ParticipantConnectedSupporters &&
            res.data.allParticipantConnectedSupporters
              .ParticipantConnectedSupporters != ""
          ) {
            let DATA =
              res.data.allParticipantConnectedSupporters
                .ParticipantConnectedSupporters;
            let myData = [];
            DATA.map((item, index) => {
              let UData =
                item.fkParticipantConnectedSupporterIdrel &&
                item.fkParticipantConnectedSupporterIdrel.Userdata != ""
                  ? item.fkParticipantConnectedSupporterIdrel.Userdata[0]
                  : null;
              if (UData) {
                let mainData = {
                  ...item,
                  ...UData,
                  fkParticipantConnectedSupporterIdrel: null
                };

                myData.push(mainData);
              } else {
                console.log(
                  "getAllConnectedParticipant user data not availalable",
                  res
                );
              }
            });
            // console.log("getAllConnectedSupportertest Final data", myData);

            myData.map((item, index) => {
              // console.log(
              //   "response data",
              //   item.address,
              //   ":::::::::::::",
              //   item.city
              // );

              let dob = "";
              if (item.dob) {
                dob = item.dob;
              }
              let dobN = "";
              if (dob && !dob.includes("/")) {
                dobN = moment(dob).format("DD/MM/YYYY");
              } else {
                dobN = dob;
              }
              return (
                // (item.S No=
                (item.firstname = item.firstname),
                (item.lastname = item.lastname),
                (item.email = item.email),
                (item.flagged = item.isSupporterFlagged === 0 ? "NO" : "YES"),
                //SUPPORTER ACTIVATED OR DEACTIVATED
                (item.status = item.active === 0 ? "DEACTIVATED" : "ACTIVATED"),
                // (item.address =
                //   item.address != null
                //     ? item.address
                //     : "" + " " + (item.city != null ? item.city : "")),

                (item.address =
                  item.address != null
                    ? item.address + " " + (item.city != null ? item.city : "")
                    : ""),
                (item.phonenumber = item.phonenumber),
                (item.dob = dobN)
              );
            });

            this.setState({
              // count:
              //   res.data &&
              //   res.data.allParticipantConnectedSupporters &&
              //   res.data.allParticipantConnectedSupporters !== null
              //     ? res.data.allParticipantConnectedSupporters.totalCount
              //     : "",
              count: myData ? myData.length : 0,
              listData: myData ? myData : ""
            });
            // this.setState(
            // {
            // count:
            //   res.data &&
            //   res.data.allParticipantConnectedSupporters &&
            //   res.data.allParticipantConnectedSupporters !== null
            //     ? res.data.allParticipantConnectedSupporters.totalCount
            //     : "",
            // listData: myData
            // res.data &&
            // res.data.allParticipantConnectedSupporters !== undefined &&
            // res.data.allParticipantConnectedSupporters !== null
            //   ? res.data.allParticipantConnectedSupporters
            //       .ParticipantConnectedSupporters
            //   : ""
            // },
            // () => {
            //   this.props.disablerefetchConnect();
            //   this.props.listModalData(this.state.totalData);
            // }
            // );
            // setpeople(myData);
          } else {
            this.setState({ listData: [] });
            // setNoData(true);
          }
        })
        .catch(e => {
          this.setState({ listData: [] });
          console.log("error supporter", e);
        });
    }
  };
  unloadApi = data => {
    console.log("Data...,chchchchch", data.createdBy);
    if (data.createdBy) {
      fetchMethod(UserdataCheckBalance(data.createdBy))
        .then(response => response.json())
        .then(res => {
          //  if (res && res.data && res.data.allDisputes && res.data.allDisputes.Disputes != '') {
          //    console.log('Dispute Found')
          //    saveDisputeData(res.data.allDisputes.Disputes[0])
          //   }

          this.UserdataCardwithdrawCall(data.createdBy);
          console.log(
            "res UserdataCheckBalance => ",
            res.data.UserdataCheckBalance
          );
        })
        .catch(e => {
          alert(e);
          console.log("UserdataCheckBalance error ", e);
        });
    } else {
      return;
    }
    // .then(res => {
    //   // this.
    // });
  };
  updatePagination = (pageNumber, size) => {
    this.setState(
      {
        pageNo: pageNumber,
        rows: size
      },
      () => {
        this.connectedSupporter();
      }
    );
  };
  BlockUserCard = data => {
    console.log("BlockUserCard", data.createdBy);
    if (data.createdBy) {
      fetchMethod(UserdataCheckBalance(data.createdBy))
        .then(response => response.json())
        .then(res => {
          console.log("#res....res.....res", res);
          //  if (res && res.data && res.data.allDisputes && res.data.allDisputes.Disputes != '') {
          //    console.log('Dispute Found')
          //    saveDisputeData(res.data.allDisputes.Disputes[0])
          //   }

          fetchMethod(UserdataCardBlock(data.createdBy))
            .then(response => response.json())
            .then(res => {
              //  if (res && res.data && res.data.allDisputes && res.data.allDisputes.Disputes != '') {
              //    console.log('Dispute Found')
              //    saveDisputeData(res.data.allDisputes.Disputes[0])
              //   }
              console.log("res UserdataCardBlock => ", res);
            })
            .catch(e => {
              alert(e);
              console.log("UserdataCardBlock error ", e);
            });

          console.log(
            "res UserdataCheckBalance => ",
            res.data.UserdataCheckBalance
          );
        })
        .catch(e => {
          alert(e);
          console.log("UserdataCheckBalance error ", e);
        });
    }
  };
  render() {
    // console.log("listData", this.state.listData)
    const nameColumn = [
      localStorage.getItem("role") === "ADMIN"
        ? {
            Header: "S No.",
            Cell: row => {
              return <div className="dot">{row.original.sNo}</div>;
            },
            width: 45
          }
        : ""
    ];
    const actionButton = [
      {
        Header: "",
        sortable: false,
        Cell: row => (
          <div>
            {row.original.flagged === "YES" ? (
              <Button
                className="resetBtn"
                onClick={() => {
                  this.BlockUserCard(row.original);
                }}
              >
                BLOCK
              </Button>
            ) : (
              ""
            )}
          </div>
        )
      }
    ];
    const columns = nameColumn
      .concat(adminSupporterList.columns)
      .concat(actionButton);
    return (
      <div>
        {this.props.hasRefetch ? this.connectedSupporter() : ""}
        {this.state.listData ? (
          <div className="connectedSupporterTable">
            <ReactTableComponent
              listData={this.state.listData}
              listConfig={
                localStorage.getItem("role") === "ADMIN"
                  ? adminSupporterList
                  : guardianSupporterList
              }
              columns={columns}
              dataCount={this.state.count}
              updatePagination={this.updatePagination}
              initialPage={this.state.pageNo / this.state.rows}
              onRowClick={() => {}}
              forSerialNo={{
                pageNo: this.state.pageNo,
                pageSize: this.state.rows
              }}
            />
          </div>
        ) : (
          <div className="spinner">
            <DotLoader size={70} color={"#020f1f"} />
          </div>
        )}
      </div>
    );
  }
}

export default ConnectedSupporter;
